name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  AWS_REGION: us-east-1

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run code formatting check
      run: |
        black --check --diff src/ tests/

    - name: Run import sorting check
      run: |
        isort --check-only --diff --profile black src/ tests/

    - name: Run linting
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run type checking
      run: |
        PYTHONPATH=. mypy src/ --config-file=mypy.ini

    - name: Security vulnerability scan
      run: |
        pip install bandit safety semgrep pip-audit
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        semgrep --config=auto --json --output=semgrep-report.json src/ || true
        pip-audit --format=json --output=pip-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          pip-audit-report.json

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality

    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run unit tests with coverage
      run: |
        PYTHONPATH=. pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.10'
      with:
        name: coverage-reports
        path: htmlcov/

  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/deployment/Dockerfile
        push: false
        tags: fraud-detection-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'fraud-detection-api:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'

  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6.0

    - name: Terraform Format Check
      run: |
        cd infra/
        terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        cd infra/
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd infra/
        terraform validate

    - name: Run tfsec security scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: infra/
        format: sarif
        sarif_file: tfsec-results.sarif
      continue-on-error: true

    - name: Upload tfsec scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('tfsec-results.sarif') != ''
      with:
        sarif_file: tfsec-results.sarif

  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test, docker-build, terraform-validate]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check deployment configuration
      run: |
        echo "Checking deployment readiness..."

        # Check if required files exist
        test -f src/deployment/Dockerfile || (echo "Dockerfile missing" && exit 1)
        test -f infra/main.tf || (echo "Terraform main.tf missing" && exit 1)
        test -f requirements.txt || (echo "requirements.txt missing" && exit 1)

        # Check if environment variables are properly templated
        grep -q "AWS_REGION" README.md || echo "Warning: AWS_REGION not documented in README"

        echo "Deployment readiness check passed!"

    - name: Generate deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | PASSED |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | PASSED |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | PASSED |" >> $GITHUB_STEP_SUMMARY
        echo "| Terraform | VALIDATED |" >> $GITHUB_STEP_SUMMARY
        echo "| Deployment Ready | YES |" >> $GITHUB_STEP_SUMMARY

  notification:
    name: Pipeline Status Notification
    runs-on: ubuntu-latest
    needs: [code-quality, test, docker-build, terraform-validate, deployment-check]
    if: always()

    steps:
    - name: Pipeline Success
      if: needs.code-quality.result == 'success' && needs.test.result == 'success' && needs.docker-build.result == 'success' && needs.terraform-validate.result == 'success'
      run: |
        echo "All pipeline checks passed successfully!"
        echo "The MLOps fraud detection system is ready for deployment."

    - name: Pipeline Failure
      if: needs.code-quality.result == 'failure' || needs.test.result == 'failure' || needs.docker-build.result == 'failure' || needs.terraform-validate.result == 'failure'
      run: |
        echo "Pipeline failed. Please check the failed jobs and fix issues before deployment."
        exit 1
